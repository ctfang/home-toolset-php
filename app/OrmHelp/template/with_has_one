// 表依赖
func (receiver *{name}) With{FuncName}() *{name} {
	con := receiver.Model()
	con.wheresSession = append(con.wheresSession, func() {
		con.{other} = &{other_orm}{}
		ids := con.list.GetTo{source_key}Distinct()
		if len(ids) > 0 {
			others := con.{other}.WhereIn("{other_key}", ids).Find()
			mapOthers := make(map[{source_type}]*{other_orm})
			for _, other := range others {
				mapOthers[other.{other_key_by_camel}] = other
			}
			for _, source := range con.list {
				v, ok := mapOthers[source.{source_key}]
				if ok {
					source.{other} = v
				}
			}
		}
	})
	return con
}
// 获取表依赖, make = true 如果依赖不存在, 也构建一个空对象返回
func (receiver *{name}) GetWith{FuncName}(make ...bool) *{other_orm} {
	data := receiver.{other}
	if len(make) >= 1 {
		if !data.Has() {
			data = &{other_orm}{}
		}
	}
	return data
}
